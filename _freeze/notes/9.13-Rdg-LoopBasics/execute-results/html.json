{
  "hash": "b49900be20cb85f6ebb7c380dbec4e35",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"9/13 Reading - Loop Basics in Java\"\n---\n\n\n\n\n## Java's for-each loop:\n\n      for (String food : twinCitiesFoods) {\n            System.out.println(\"Go try some \" +           food + \"!\");\n        }\n        \n        \nor:\n\n      for (loop variable:collection)\n      \n## Java's While Loops:\n\n* Good if there is not a collection to iterate over, or if you do not know in advance how many times the loop should iterate before done\n* while loops are the same concept as in python\n\n\n::: {.cell}\n\n```{.js .cell-code}\n        Scanner input = new Scanner(System.in);\n        // We make secretNums mutable so we can remove correct guesses as we go: \n        List<String> secretWords = new ArrayList<>(List.of(\"fish\", \"tree\", \"turnip\"));\n        while(!secretWords.isEmpty()) {  // What is the ! operator here? (Answer: “not”)\n            System.out.println(\"There are \" + secretWords.size() + \" words remaining.\");\n            System.out.println(\"Guess a word:\");\n            String guess = input.nextLine();\n            if (secretWords.remove(guess)) {\n                System.out.println(\"You got one!\");\n            } else {\n                System.out.println(\"Nope, sorry.\");\n            }\n            System.out.println();  // blank line for readability\n        }\n        System.out.println(\"Congratulations!\");\n```\n\n\n<script>\n        Scanner input = new Scanner(System.in);\n        // We make secretNums mutable so we can remove correct guesses as we go: \n        List<String> secretWords = new ArrayList<>(List.of(\"fish\", \"tree\", \"turnip\"));\n        while(!secretWords.isEmpty()) {  // What is the ! operator here? (Answer: “not”)\n            System.out.println(\"There are \" + secretWords.size() + \" words remaining.\");\n            System.out.println(\"Guess a word:\");\n            String guess = input.nextLine();\n            if (secretWords.remove(guess)) {\n                System.out.println(\"You got one!\");\n            } else {\n                System.out.println(\"Nope, sorry.\");\n            }\n            System.out.println();  // blank line for readability\n        }\n        System.out.println(\"Congratulations!\");\n</script>\n:::\n\n\nLoop syntac in Java:\n\nwhile (condition) {\n\n  (body)\n  \n}\n\n* a condition is any expression that evaluates to a boolean\n* the body is any sequence of statments\n\nIn java due to static checking it ensures the condition is a boolean prior to running\n\n\n## Breaks\n\nYou can fix code by using a break statement:\n\n\n::: {.cell}\n\n```{.js .cell-code}\n        String secretWord = \"bird\";\n        while(true) {\n            System.out.println(\"Guess a word:\");\n            String guess = input.nextLine();\n            if (guess.equals(secretWord)) {\n                System.out.println(\"You got it!\");\n                break;\n            } else {\n                System.out.println(\"Nope, sorry.\");\n            }\n        }\n```\n\n\n<script>\n        String secretWord = \"bird\";\n        while(true) {\n            System.out.println(\"Guess a word:\");\n            String guess = input.nextLine();\n            if (guess.equals(secretWord)) {\n                System.out.println(\"You got it!\");\n                break;\n            } else {\n                System.out.println(\"Nope, sorry.\");\n            }\n        }\n</script>\n:::\n\n\nYou may hear \"repeat until sentinel\"!!\n\n  while (true) {\n    do some things\n    if (time to stop) {\n    break\n    }\n    do some other things\n  }\n  \nYou can use breaks inside of loops also!\n\n\n::: {.cell}\n\n```{.js .cell-code}\n        for (String food : twinCitiesFoods) {\n            System.out.println(\"Would you like some \" + food + \"?\");\n            String answer = input.nextLine();\n            if (answer.toLowerCase().startsWith(\"y\")) {\n                System.out.println(\"OK, here's some \" + food + \"!\");\n                break;\n            }\n        }\n```\n\n\n<script>\n        for (String food : twinCitiesFoods) {\n            System.out.println(\"Would you like some \" + food + \"?\");\n            String answer = input.nextLine();\n            if (answer.toLowerCase().startsWith(\"y\")) {\n                System.out.println(\"OK, here's some \" + food + \"!\");\n                break;\n            }\n        }\n</script>\n:::\n\n\nYou can also use 'continue' statment which means it skips to the next iteration of the loop!\n\n\n::: {.cell}\n\n```{.js .cell-code}\n        List<String> outOfStock = List.of(\"星洲炒米\", \"yassa chicken\", \"tamales\");\n        for (String food : twinCitiesFoods) {\n            if (outOfStock.contains(food)) {\n                continue;  // Don’t offer it if we don’t have it!\n            }\n            System.out.println(\"Would you like some \" + food + \"?\");\n            String answer = input.nextLine();\n            if (answer.toLowerCase().startsWith(\"y\")) {\n                System.out.println(\"OK, here's some \" + food + \"!\");\n                break;\n            }\n        }\n```\n\n\n<script>\n        List<String> outOfStock = List.of(\"星洲炒米\", \"yassa chicken\", \"tamales\");\n        for (String food : twinCitiesFoods) {\n            if (outOfStock.contains(food)) {\n                continue;  // Don’t offer it if we don’t have it!\n            }\n            System.out.println(\"Would you like some \" + food + \"?\");\n            String answer = input.nextLine();\n            if (answer.toLowerCase().startsWith(\"y\")) {\n                System.out.println(\"OK, here's some \" + food + \"!\");\n                break;\n            }\n        }\n</script>\n:::\n\n\nA common pattern:\n\n  (initial step)\n  while (condition) {\n    ... do things...\n    (next step)\n  }\n\nA C Style for loop due to its origin in language C! Also called the \"do n times loop\" in class.\n\n  for (initial step); (condition); (next step) {\n    ... do things...\n  }\n\nYou can use the C-style for loop instead of the for-each loop, but it can be confusing! Typically just stick with normal for-loop.\n\nA common error: The \"off by one error\"\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}